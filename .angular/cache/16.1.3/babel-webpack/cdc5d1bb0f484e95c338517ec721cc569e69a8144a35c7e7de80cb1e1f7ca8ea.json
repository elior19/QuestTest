{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { SetFlights, SetWorkers } from '../store/actions';\nimport { Worker } from '../models/worker';\nimport { Flight } from '../models/flight';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let DataReceiverService = /*#__PURE__*/(() => {\n  class DataReceiverService {\n    constructor(store) {\n      this.store = store;\n      this.getWorkers();\n    }\n    getWorkers() {\n      // cycle\n      // get data\n      let workers = Workers;\n      // add to store\n      this.store.dispatch(new SetWorkers({\n        workers\n      }));\n    }\n    getFlightsByWorkerId(workerId) {\n      // delete old interval\n      // create new interval\n      // add to store\n      let flights = Flights;\n      this.store.dispatch(new SetFlights({\n        flights\n      }));\n    }\n  }\n  DataReceiverService.ɵfac = function DataReceiverService_Factory(t) {\n    return new (t || DataReceiverService)(i0.ɵɵinject(i1.Store));\n  };\n  DataReceiverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataReceiverService,\n    factory: DataReceiverService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataReceiverService;\n})();\nconst Workers = [new Worker(1, 'a'), new Worker(2, 'b'), new Worker(3, 'c'), new Worker(4, 'd'), new Worker(5, 'e')];\nconst Flights = [new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5))];","map":{"version":3,"names":["Store","SetFlights","SetWorkers","Worker","Flight","DataReceiverService","constructor","store","getWorkers","workers","Workers","dispatch","getFlightsByWorkerId","workerId","flights","Flights","i0","ɵɵinject","i1","factory","ɵfac","providedIn","Date"],"sources":["C:\\Users\\elior\\WebstormProjects\\quest\\src\\app\\services\\data-receiver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {SetFlights, SetWorkers} from '../store/actions';\nimport {Worker} from '../models/worker';\nimport {Flight} from '../models/flight';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataReceiverService {\n\n  constructor(private store: Store<{workers: Worker[]}>) {\n    this.getWorkers();\n  }\n\n  getWorkers() {\n    // cycle\n    // get data\n    let workers: Worker[] = Workers;\n    // add to store\n    this.store.dispatch(new SetWorkers({workers}));\n  }\n\n  getFlightsByWorkerId(workerId: number) {\n    // delete old interval\n    // create new interval\n    // add to store\n    let flights: Flight[] = Flights;\n\n    this.store.dispatch(new SetFlights({flights}));\n  }\n}\n\nconst Workers: Worker[] = [\n  new Worker(1, 'a'),\n  new Worker(2, 'b'),\n  new Worker(3, 'c'),\n  new Worker(4, 'd'),\n  new Worker(5, 'e')\n];\n\nconst Flights: Flight[] = [\n  new Flight('1A', 'Israel', new Date(2013, 12, 5),\n    'USA', new Date(2013, 12, 5)),\n  new Flight('1A', 'Israel', new Date(2013, 12, 5),\n    'USA', new Date(2013, 12, 5)),\n  new Flight('1A', 'Israel', new Date(2013, 12, 5),\n    'USA', new Date(2013, 12, 5)),\n  new Flight('1A', 'Israel', new Date(2013, 12, 5),\n    'USA', new Date(2013, 12, 5)),\n  new Flight('1A', 'Israel', new Date(2013, 12, 5),\n    'USA', new Date(2013, 12, 5))\n];\n"],"mappings":"AACA,SAAQA,KAAK,QAAO,aAAa;AACjC,SAAQC,UAAU,EAAEC,UAAU,QAAO,kBAAkB;AACvD,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,QAAO,kBAAkB;;;AAKvC,WAAaC,mBAAmB;EAA1B,MAAOA,mBAAmB;IAE9BC,YAAoBC,KAAiC;MAAjC,KAAAA,KAAK,GAALA,KAAK;MACvB,IAAI,CAACC,UAAU,EAAE;IACnB;IAEAA,UAAUA,CAAA;MACR;MACA;MACA,IAAIC,OAAO,GAAaC,OAAO;MAC/B;MACA,IAAI,CAACH,KAAK,CAACI,QAAQ,CAAC,IAAIT,UAAU,CAAC;QAACO;MAAO,CAAC,CAAC,CAAC;IAChD;IAEAG,oBAAoBA,CAACC,QAAgB;MACnC;MACA;MACA;MACA,IAAIC,OAAO,GAAaC,OAAO;MAE/B,IAAI,CAACR,KAAK,CAACI,QAAQ,CAAC,IAAIV,UAAU,CAAC;QAACa;MAAO,CAAC,CAAC,CAAC;IAChD;;EArBWT,mBAAmB,C;qBAAnBA,mBAAmB,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAlB,KAAA;EAAA;EAAnBK,mBAAmB,C;WAAnBA,mBAAmB;IAAAc,OAAA,EAAnBd,mBAAmB,CAAAe,IAAA;IAAAC,UAAA,EAFlB;EAAM;EAAA,OAEPhB,mBAAmB;AAAA;AAwBhC,MAAMK,OAAO,GAAa,CACxB,IAAIP,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAClB,IAAIA,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAClB,IAAIA,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAClB,IAAIA,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAClB,IAAIA,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CACnB;AAED,MAAMY,OAAO,GAAa,CACxB,IAAIX,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIkB,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAC9C,KAAK,EAAE,IAAIA,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAC/B,IAAIlB,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIkB,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAC9C,KAAK,EAAE,IAAIA,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAC/B,IAAIlB,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIkB,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAC9C,KAAK,EAAE,IAAIA,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAC/B,IAAIlB,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIkB,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAC9C,KAAK,EAAE,IAAIA,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAC/B,IAAIlB,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIkB,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAC9C,KAAK,EAAE,IAAIA,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}