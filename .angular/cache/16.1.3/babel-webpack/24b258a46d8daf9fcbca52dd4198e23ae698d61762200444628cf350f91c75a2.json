{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { SetFlights, SetWorkers } from '../store/actions';\nimport { Worker } from '../models/worker';\nimport { Flight } from '../models/flight';\nimport { FlightInformation } from '../models/flightInformation';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common/http\";\nexport let DataReceiverService = /*#__PURE__*/(() => {\n  class DataReceiverService {\n    constructor(_store, _http) {\n      this._store = _store;\n      this._http = _http;\n      this.getWorkers();\n      this.getFlightsByWorkerId(1);\n    }\n    getWorkers() {\n      // cycle??\n      let workers = [];\n      this._http.get('http://localhost:3000/workers').subscribe(response => {\n        response.forEach(worker => {\n          workers.push(new Worker().setJson(worker));\n        });\n        this._store.dispatch(new SetWorkers({\n          workers\n        }));\n      });\n    }\n    getFlightsByWorkerId(workerId) {\n      // delete old interval\n      // create new interval\n      // add to store\n      let flights = [];\n      let url = 'http://localhost:3000/flights/' + workerId;\n      this._http.get(url).subscribe(response => {\n        response.forEach(flight => {\n          flights.push(new Flight().setJson(flight));\n        });\n        this._store.dispatch(new SetFlights({\n          flights\n        }));\n      });\n    }\n  }\n  DataReceiverService.ɵfac = function DataReceiverService_Factory(t) {\n    return new (t || DataReceiverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.HttpClient));\n  };\n  DataReceiverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataReceiverService,\n    factory: DataReceiverService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataReceiverService;\n})();\nconst Workers = [new Worker(1, 'a'), new Worker(2, 'b'), new Worker(3, 'c'), new Worker(4, 'd'), new Worker(5, 'e')];\nconst Flights = [new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5), new FlightInformation('A38', 350, 35, 10)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5), new FlightInformation('A38', 350, 35, 10)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5), new FlightInformation('A38', 350, 35, 10)), new Flight('1A', 'Israel', new Date(2013, 12, 5), 'USA', new Date(2013, 12, 5), new FlightInformation('A38', 350, 35, 10))];","map":{"version":3,"names":["Store","SetFlights","SetWorkers","Worker","Flight","FlightInformation","HttpClient","DataReceiverService","constructor","_store","_http","getWorkers","getFlightsByWorkerId","workers","get","subscribe","response","forEach","worker","push","setJson","dispatch","workerId","flights","url","flight","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn","Workers","Flights","Date"],"sources":["C:\\Users\\elior\\WebstormProjects\\quest\\src\\app\\services\\data-receiver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {SetFlights, SetWorkers} from '../store/actions';\nimport {Worker} from '../models/worker';\nimport {Flight} from '../models/flight';\nimport {FlightInformation} from '../models/flightInformation';\nimport {HttpClient} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataReceiverService {\n\n  constructor(private _store: Store<{workers: Worker[]}>, private _http: HttpClient) {\n    this.getWorkers();\n    this.getFlightsByWorkerId(1);\n  }\n\n  getWorkers() {\n    // cycle??\n    let workers: Worker[] = [];\n    this._http.get<any>('http://localhost:3000/workers').subscribe((response: any[]) => {\n      response.forEach((worker: any) => {\n        workers.push(new Worker().setJson(worker));\n      });\n      this._store.dispatch(new SetWorkers({workers}));\n    });\n  }\n\n  getFlightsByWorkerId(workerId: number) {\n    // delete old interval\n    // create new interval\n    // add to store\n    let flights: Flight[] = [];\n    let url = 'http://localhost:3000/flights/' + workerId;\n    this._http.get<any>(url).subscribe((response: any[]) => {\n      response.forEach((flight: any) => {\n        flights.push(new Flight().setJson(flight));\n      });\n      this._store.dispatch(new SetFlights({flights}));\n    });\n  }\n}\n\nconst Workers: Worker[] = [\n  new Worker(1, 'a'),\n  new Worker(2, 'b'),\n  new Worker(3, 'c'),\n  new Worker(4, 'd'),\n  new Worker(5, 'e')\n];\n\nconst Flights: Flight[] = [\n  new Flight('1A',\n    'Israel',\n    new Date(2013, 12, 5),\n    'USA',\n    new Date(2013, 12, 5),\n    new FlightInformation('A38', 350, 35, 10)),\n\n  new Flight('1A',\n    'Israel',\n    new Date(2013, 12, 5),\n    'USA',\n    new Date(2013, 12, 5),\n    new FlightInformation('A38', 350, 35, 10)),\n\n  new Flight('1A',\n    'Israel',\n    new Date(2013, 12, 5),\n    'USA',\n    new Date(2013, 12, 5),\n    new FlightInformation('A38', 350, 35, 10)),\n\n  new Flight('1A',\n    'Israel',\n    new Date(2013, 12, 5),\n    'USA',\n    new Date(2013, 12, 5),\n    new FlightInformation('A38', 350, 35, 10)),\n\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}