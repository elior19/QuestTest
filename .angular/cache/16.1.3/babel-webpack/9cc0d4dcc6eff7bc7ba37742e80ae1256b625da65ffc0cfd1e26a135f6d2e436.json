{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { SetFlights, SetWorkers } from '../store/actions';\nimport { Worker } from '../models/worker';\nimport { Flight } from '../models/flight';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common/http\";\nexport let DataReceiverService = /*#__PURE__*/(() => {\n  class DataReceiverService {\n    constructor(_store, _http) {\n      this._store = _store;\n      this._http = _http;\n      this.getWorkers();\n      this.getFlightsByWorkerId(1);\n    }\n    getWorkers() {\n      // cycle??\n      let workers = [];\n      this._http.get('http://localhost:3000/workers').subscribe(response => {\n        response.forEach(worker => {\n          workers.push(new Worker().setJson(worker));\n        });\n        this._store.dispatch(new SetWorkers({\n          workers\n        }));\n      });\n    }\n    getFlightsByWorkerId(workerId) {\n      // delete old interval\n      // create new interval\n      let flights = [];\n      let url = 'http://localhost:3000/flights/' + workerId;\n      this._http.get('http://localhost:3000/flights/' + workerId).subscribe(response => {\n        response.forEach(flight => {\n          flights.push(new Flight().setJson(flight));\n        });\n        this._store.dispatch(new SetFlights({\n          flights\n        }));\n      });\n    }\n  }\n  DataReceiverService.ɵfac = function DataReceiverService_Factory(t) {\n    return new (t || DataReceiverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.HttpClient));\n  };\n  DataReceiverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataReceiverService,\n    factory: DataReceiverService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataReceiverService;\n})();","map":{"version":3,"names":["Store","SetFlights","SetWorkers","Worker","Flight","HttpClient","DataReceiverService","constructor","_store","_http","getWorkers","getFlightsByWorkerId","workers","get","subscribe","response","forEach","worker","push","setJson","dispatch","workerId","flights","url","flight","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\elior\\WebstormProjects\\quest\\src\\app\\services\\data-receiver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {SetFlights, SetWorkers} from '../store/actions';\nimport {Worker} from '../models/worker';\nimport {Flight} from '../models/flight';\nimport {FlightInformation} from '../models/flightInformation';\nimport {HttpClient} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataReceiverService {\n\n  constructor(private _store: Store<{workers: Worker[]}>, private _http: HttpClient) {\n    this.getWorkers();\n    this.getFlightsByWorkerId(1);\n  }\n\n  getWorkers() {\n    // cycle??\n    let workers: Worker[] = [];\n    this._http.get<any>('http://localhost:3000/workers').subscribe((response: any[]) => {\n      response.forEach((worker: any) => {\n        workers.push(new Worker().setJson(worker));\n      });\n      this._store.dispatch(new SetWorkers({workers}));\n    });\n  }\n\n  getFlightsByWorkerId(workerId: number) {\n    // delete old interval\n    // create new interval\n    let flights: Flight[] = [];\n    let url = 'http://localhost:3000/flights/' + workerId;\n    this._http.get<any>('http://localhost:3000/flights/' + workerId).subscribe((response: any[]) => {\n      response.forEach((flight: any) => {\n        flights.push(new Flight().setJson(flight));\n      });\n      this._store.dispatch(new SetFlights({flights}));\n    });\n  }\n}\n"],"mappings":"AACA,SAAQA,KAAK,QAAO,aAAa;AACjC,SAAQC,UAAU,EAAEC,UAAU,QAAO,kBAAkB;AACvD,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,QAAO,kBAAkB;AAEvC,SAAQC,UAAU,QAAO,sBAAsB;;;;AAO/C,WAAaC,mBAAmB;EAA1B,MAAOA,mBAAmB;IAE9BC,YAAoBC,MAAkC,EAAUC,KAAiB;MAA7D,KAAAD,MAAM,GAANA,MAAM;MAAsC,KAAAC,KAAK,GAALA,KAAK;MACnE,IAAI,CAACC,UAAU,EAAE;MACjB,IAAI,CAACC,oBAAoB,CAAC,CAAC,CAAC;IAC9B;IAEAD,UAAUA,CAAA;MACR;MACA,IAAIE,OAAO,GAAa,EAAE;MAC1B,IAAI,CAACH,KAAK,CAACI,GAAG,CAAM,+BAA+B,CAAC,CAACC,SAAS,CAAEC,QAAe,IAAI;QACjFA,QAAQ,CAACC,OAAO,CAAEC,MAAW,IAAI;UAC/BL,OAAO,CAACM,IAAI,CAAC,IAAIf,MAAM,EAAE,CAACgB,OAAO,CAACF,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC;QACF,IAAI,CAACT,MAAM,CAACY,QAAQ,CAAC,IAAIlB,UAAU,CAAC;UAACU;QAAO,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;IACJ;IAEAD,oBAAoBA,CAACU,QAAgB;MACnC;MACA;MACA,IAAIC,OAAO,GAAa,EAAE;MAC1B,IAAIC,GAAG,GAAG,gCAAgC,GAAGF,QAAQ;MACrD,IAAI,CAACZ,KAAK,CAACI,GAAG,CAAM,gCAAgC,GAAGQ,QAAQ,CAAC,CAACP,SAAS,CAAEC,QAAe,IAAI;QAC7FA,QAAQ,CAACC,OAAO,CAAEQ,MAAW,IAAI;UAC/BF,OAAO,CAACJ,IAAI,CAAC,IAAId,MAAM,EAAE,CAACe,OAAO,CAACK,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC;QACF,IAAI,CAAChB,MAAM,CAACY,QAAQ,CAAC,IAAInB,UAAU,CAAC;UAACqB;QAAO,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;IACJ;;EA7BWhB,mBAAmB,C;qBAAnBA,mBAAmB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAA3B,KAAA,GAAAyB,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAvB,UAAA;EAAA;EAAnBC,mBAAmB,C;WAAnBA,mBAAmB;IAAAuB,OAAA,EAAnBvB,mBAAmB,CAAAwB,IAAA;IAAAC,UAAA,EAFlB;EAAM;EAAA,OAEPzB,mBAAmB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}