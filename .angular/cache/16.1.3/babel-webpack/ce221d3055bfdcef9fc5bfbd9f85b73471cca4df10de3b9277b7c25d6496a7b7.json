{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { SetFlights, SetWorkers } from '../store/actions';\nimport { Worker } from '../models/worker';\nimport { Flight } from '../models/flight';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common/http\";\nconst MINUTE = 1000 * 60;\nexport let DataReceiverService = /*#__PURE__*/(() => {\n  class DataReceiverService {\n    constructor(_store, _http) {\n      this._store = _store;\n      this._http = _http;\n      this.getData();\n    }\n    getData() {\n      // TODO: Is this should be interval too?\n      this.getWorkers();\n      if (this.interval) {\n        // clean the previous worker's flights interval\n        clearInterval(this.interval);\n      }\n      this.getFlightsByWorkerId(1);\n      this.interval = setInterval(() => {\n        this.getFlightsByWorkerId(1);\n      }, MINUTE);\n    }\n    getWorkers() {\n      let workers = [];\n      let url = 'http://' + environment.serverhost + ':' + environment.serverport + '/workers';\n      this._http.get(url).subscribe(response => {\n        response.forEach(worker => {\n          workers.push(new Worker().setJson(worker));\n        });\n        this._store.dispatch(new SetWorkers({\n          workers\n        }));\n      });\n    }\n    getFlightsByWorkerId(workerId) {\n      let flights = [];\n      let url = 'http://' + environment.serverhost + ':' + environment.serverport + '/flights/' + workerId;\n      this._http.get(url).subscribe(response => {\n        response.forEach(flight => {\n          flights.push(new Flight().setJson(flight));\n        });\n        this._store.dispatch(new SetFlights({\n          flights\n        }));\n      });\n    }\n    ngOnDestroy() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n    }\n  }\n  DataReceiverService.ɵfac = function DataReceiverService_Factory(t) {\n    return new (t || DataReceiverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.HttpClient));\n  };\n  DataReceiverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataReceiverService,\n    factory: DataReceiverService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataReceiverService;\n})();","map":{"version":3,"names":["Store","SetFlights","SetWorkers","Worker","Flight","HttpClient","environment","MINUTE","DataReceiverService","constructor","_store","_http","getData","getWorkers","interval","clearInterval","getFlightsByWorkerId","setInterval","workers","url","serverhost","serverport","get","subscribe","response","forEach","worker","push","setJson","dispatch","workerId","flights","flight","ngOnDestroy","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\elior\\WebstormProjects\\quest\\src\\app\\services\\data-receiver.service.ts"],"sourcesContent":["import {Injectable, OnDestroy} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {SetFlights, SetWorkers} from '../store/actions';\nimport {Worker} from '../models/worker';\nimport {Flight} from '../models/flight';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {environment} from '../../environments/environment';\n\nconst MINUTE = 1000*60;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataReceiverService implements OnDestroy{\n  private interval: any;\n\n  constructor(private _store: Store<{workers: Worker[]}>, private _http: HttpClient) {\n    this.getData();\n  }\n\n  getData(): void {\n    // TODO: Is this should be interval too?\n    this.getWorkers();\n\n    if (this.interval) {\n      // clean the previous worker's flights interval\n      clearInterval(this.interval);\n    }\n    this.getFlightsByWorkerId(1);\n    this.interval = setInterval(() => {\n      this.getFlightsByWorkerId(1);\n    }, MINUTE);\n  }\n\n  getWorkers(): void {\n    let workers: Worker[] = [];\n    let url: string = 'http://' + environment.serverhost + ':' + environment.serverport + '/workers';\n    this._http.get<any>(url).subscribe((response: any[]) => {\n      response.forEach((worker: any) => {\n        workers.push(new Worker().setJson(worker));\n      });\n      this._store.dispatch(new SetWorkers({workers}));\n    });\n  }\n\n  getFlightsByWorkerId(workerId: number): void {\n    let flights: Flight[] = [];\n    let url: string = 'http://' + environment.serverhost + ':' + environment.serverport + '/flights/' + workerId;\n    this._http.get<any>(url).subscribe((response: any[]) => {\n      response.forEach((flight: any) => {\n        flights.push(new Flight().setJson(flight));\n      });\n      this._store.dispatch(new SetFlights({flights}));\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n"],"mappings":"AACA,SAAQA,KAAK,QAAO,aAAa;AACjC,SAAQC,UAAU,EAAEC,UAAU,QAAO,kBAAkB;AACvD,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,UAAU,QAAO,sBAAsB;AAE/C,SAAQC,WAAW,QAAO,gCAAgC;;;;AAE1D,MAAMC,MAAM,GAAG,IAAI,GAAC,EAAE;AAKtB,WAAaC,mBAAmB;EAA1B,MAAOA,mBAAmB;IAG9BC,YAAoBC,MAAkC,EAAUC,KAAiB;MAA7D,KAAAD,MAAM,GAANA,MAAM;MAAsC,KAAAC,KAAK,GAALA,KAAK;MACnE,IAAI,CAACC,OAAO,EAAE;IAChB;IAEAA,OAAOA,CAAA;MACL;MACA,IAAI,CAACC,UAAU,EAAE;MAEjB,IAAI,IAAI,CAACC,QAAQ,EAAE;QACjB;QACAC,aAAa,CAAC,IAAI,CAACD,QAAQ,CAAC;;MAE9B,IAAI,CAACE,oBAAoB,CAAC,CAAC,CAAC;MAC5B,IAAI,CAACF,QAAQ,GAAGG,WAAW,CAAC,MAAK;QAC/B,IAAI,CAACD,oBAAoB,CAAC,CAAC,CAAC;MAC9B,CAAC,EAAET,MAAM,CAAC;IACZ;IAEAM,UAAUA,CAAA;MACR,IAAIK,OAAO,GAAa,EAAE;MAC1B,IAAIC,GAAG,GAAW,SAAS,GAAGb,WAAW,CAACc,UAAU,GAAG,GAAG,GAAGd,WAAW,CAACe,UAAU,GAAG,UAAU;MAChG,IAAI,CAACV,KAAK,CAACW,GAAG,CAAMH,GAAG,CAAC,CAACI,SAAS,CAAEC,QAAe,IAAI;QACrDA,QAAQ,CAACC,OAAO,CAAEC,MAAW,IAAI;UAC/BR,OAAO,CAACS,IAAI,CAAC,IAAIxB,MAAM,EAAE,CAACyB,OAAO,CAACF,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC;QACF,IAAI,CAAChB,MAAM,CAACmB,QAAQ,CAAC,IAAI3B,UAAU,CAAC;UAACgB;QAAO,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;IACJ;IAEAF,oBAAoBA,CAACc,QAAgB;MACnC,IAAIC,OAAO,GAAa,EAAE;MAC1B,IAAIZ,GAAG,GAAW,SAAS,GAAGb,WAAW,CAACc,UAAU,GAAG,GAAG,GAAGd,WAAW,CAACe,UAAU,GAAG,WAAW,GAAGS,QAAQ;MAC5G,IAAI,CAACnB,KAAK,CAACW,GAAG,CAAMH,GAAG,CAAC,CAACI,SAAS,CAAEC,QAAe,IAAI;QACrDA,QAAQ,CAACC,OAAO,CAAEO,MAAW,IAAI;UAC/BD,OAAO,CAACJ,IAAI,CAAC,IAAIvB,MAAM,EAAE,CAACwB,OAAO,CAACI,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC;QACF,IAAI,CAACtB,MAAM,CAACmB,QAAQ,CAAC,IAAI5B,UAAU,CAAC;UAAC8B;QAAO,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;IACJ;IAEAE,WAAWA,CAAA;MACT,IAAI,IAAI,CAACnB,QAAQ,EAAE;QACjBC,aAAa,CAAC,IAAI,CAACD,QAAQ,CAAC;;IAEhC;;EA/CWN,mBAAmB,C;qBAAnBA,mBAAmB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAApC,KAAA,GAAAkC,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAhC,UAAA;EAAA;EAAnBG,mBAAmB,C;WAAnBA,mBAAmB;IAAA8B,OAAA,EAAnB9B,mBAAmB,CAAA+B,IAAA;IAAAC,UAAA,EAFlB;EAAM;EAAA,OAEPhC,mBAAmB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}